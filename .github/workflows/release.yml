# .github/workflows/deploy-via-ssm.yml
name: Deploy via SSM

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: AWS CLI セットアップ
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: デプロイコマンドをSSM経由で実行
        id: deploy
        run: |
          # SSMコマンドを実行してコマンドIDを取得
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "GitHub Actions デプロイ" \
            --parameters commands='["sh /var/www/next-app/deploy/deploy.sh"]' \
            --output text --query 'Command.CommandId')
          
          echo "Command ID: $COMMAND_ID"
          echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT
          
          # コマンドの完了を待機（最大10分）
          echo "デプロイコマンドの実行を開始しました..."
          for i in {1..60}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ secrets.INSTANCE_ID }}" \
              --query 'Status' --output text 2>/dev/null || echo "InProgress")
            
            echo "実行状況: $STATUS (${i}/60)"
            
            if [ "$STATUS" = "Success" ] || [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
              break
            fi
            
            sleep 10
          done
          
          # 実行結果を取得
          RESULT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.INSTANCE_ID }}" \
            --query '{Status:Status,StandardOutputContent:StandardOutputContent,StandardErrorContent:StandardErrorContent}' \
            --output json)
          
          echo "実行結果:"
          echo "$RESULT" | jq .
          
          # 結果をGitHub Outputに保存
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # ステータスを確認して終了コードを設定
          FINAL_STATUS=$(echo "$RESULT" | jq -r '.Status')
          if [ "$FINAL_STATUS" != "Success" ]; then
            echo "デプロイが失敗しました: $FINAL_STATUS"
            exit 1
          fi
          
          echo "デプロイが正常に完了しました"

      - name: デプロイ成功通知
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const result = JSON.parse(`${{ steps.deploy.outputs.result }}`);
            const output = result.StandardOutputContent || 'No output';
            const error = result.StandardErrorContent || 'No errors';
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `## ✅ デプロイ成功\n\n**コマンドID:** ${{ steps.deploy.outputs.command_id }}\n\n**実行結果:**\n\`\`\`\n${output.slice(0, 1000)}${output.length > 1000 ? '\n... (truncated)' : ''}\n\`\`\`\n\n**タイムスタンプ:** ${new Date().toISOString()}`
            });

      - name: デプロイ失敗通知
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            let errorMessage = 'デプロイ中にエラーが発生しました';
            let commandId = '${{ steps.deploy.outputs.command_id }}';
            
            try {
              const result = JSON.parse(`${{ steps.deploy.outputs.result }}`);
              const output = result.StandardOutputContent || 'No output';
              const error = result.StandardErrorContent || 'No errors';
              
              errorMessage = `## ❌ デプロイ失敗\n\n**コマンドID:** ${commandId}\n\n**ステータス:** ${result.Status}\n\n**標準出力:**\n\`\`\`\n${output.slice(0, 500)}${output.length > 500 ? '\n... (truncated)' : ''}\n\`\`\`\n\n**エラー出力:**\n\`\`\`\n${error.slice(0, 500)}${error.length > 500 ? '\n... (truncated)' : ''}\n\`\`\`\n\n**タイムスタンプ:** ${new Date().toISOString()}`;
            } catch (e) {
              errorMessage = `## ❌ デプロイ失敗\n\n**コマンドID:** ${commandId}\n\n**エラー:** 実行結果の取得に失敗しました\n\n**タイムスタンプ:** ${new Date().toISOString()}`;
            }
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: errorMessage
            });
