# .github/workflows/deploy-via-ssm.yml
name: Deploy via SSM

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: AWS CLI セットアップ
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: デプロイコマンドをSSM経由で実行
        id: deploy
        run: |
          # SSMコマンドを実行してコマンドIDを取得
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "GitHub Actions デプロイ" \
            --parameters commands='["sh /var/www/next-app/deploy/deploy.sh"]' \
            --output text --query 'Command.CommandId')
          
          echo "Command ID: $COMMAND_ID"
          echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT
          
          # コマンドの完了を待機（最大10分）
          echo "デプロイコマンドの実行を開始しました..."
          for i in {1..60}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ secrets.INSTANCE_ID }}" \
              --query 'Status' --output text 2>/dev/null || echo "InProgress")
            
            echo "実行状況: $STATUS (${i}/60)"
            
            if [ "$STATUS" = "Success" ] || [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
              break
            fi
            
            sleep 10
          done
          
          # 実行結果を取得
          RESULT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.INSTANCE_ID }}" \
            --query '{Status:Status,StandardOutputContent:StandardOutputContent,StandardErrorContent:StandardErrorContent}' \
            --output json 2>/dev/null || echo '{"Status":"Failed","StandardOutputContent":"Command invocation not found","StandardErrorContent":"Unable to retrieve command result"}')
          
          echo "実行結果:"
          echo "$RESULT" | jq . || echo "$RESULT"
          
          # 結果をGitHub Outputに保存（常に有効なJSONを保証）
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # ステータスを確認して終了コードを設定
          FINAL_STATUS=$(echo "$RESULT" | jq -r '.Status' 2>/dev/null || echo "Failed")
          echo "Final Status: $FINAL_STATUS"
          
          if [ "$FINAL_STATUS" != "Success" ]; then
            echo "デプロイが失敗しました: $FINAL_STATUS"
            # エラー情報を追加で出力
            echo "error_details<<EOF" >> $GITHUB_OUTPUT
            echo "Status: $FINAL_STATUS" >> $GITHUB_OUTPUT
            echo "Result: $RESULT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "デプロイが正常に完了しました"

      - name: デプロイ成功通知
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const result = JSON.parse(`${{ steps.deploy.outputs.result }}`);
            const output = result.StandardOutputContent || 'No output';
            const error = result.StandardErrorContent || 'No errors';
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `## ✅ デプロイ成功\n\n**コマンドID:** ${{ steps.deploy.outputs.command_id }}\n\n**実行結果:**\n\`\`\`\n${output.slice(0, 1000)}${output.length > 1000 ? '\n... (truncated)' : ''}\n\`\`\`\n\n**タイムスタンプ:** ${new Date().toISOString()}`
            });

      - name: デプロイ失敗通知
        if: failure()
        uses: actions/github-script@v7
        env:
          COMMAND_ID: ${{ steps.deploy.outputs.command_id }}
          RESULT_DATA: ${{ steps.deploy.outputs.result }}
          ERROR_DETAILS: ${{ steps.deploy.outputs.error_details }}
        with:
          script: |
            const commandId = process.env.COMMAND_ID || 'Unknown';
            const resultData = process.env.RESULT_DATA || '';
            const errorDetails = process.env.ERROR_DETAILS || '';
            
            console.log('Command ID:', commandId);
            console.log('Result Data length:', resultData.length);
            console.log('Error Details:', errorDetails);
            
            let errorMessage = 'デプロイ中にエラーが発生しました';
            
            try {
              if (resultData && resultData.trim() !== '') {
                const result = JSON.parse(resultData);
                const output = (result.StandardOutputContent || 'No output').replace(/[\r\n]+/g, '\n');
                const error = (result.StandardErrorContent || 'No errors').replace(/[\r\n]+/g, '\n');
                
                errorMessage = [
                  '## ❌ デプロイ失敗',
                  '',
                  `**コマンドID:** ${commandId}`,
                  `**ステータス:** ${result.Status}`,
                  '',
                  '**標準出力:**',
                  '```',
                  output.slice(0, 500) + (output.length > 500 ? '\n... (truncated)' : ''),
                  '```',
                  '',
                  '**エラー出力:**',
                  '```',
                  error.slice(0, 500) + (error.length > 500 ? '\n... (truncated)' : ''),
                  '```',
                  '',
                  `**タイムスタンプ:** ${new Date().toISOString()}`
                ].join('\n');
              } else {
                errorMessage = [
                  '## ❌ デプロイ失敗',
                  '',
                  `**コマンドID:** ${commandId}`,
                  '**エラー:** SSMコマンドの実行または結果取得に失敗しました',
                  '',
                  '**詳細:**',
                  '```',
                  errorDetails || 'No additional details available',
                  '```',
                  '',
                  `**タイムスタンプ:** ${new Date().toISOString()}`
                ].join('\n');
              }
            } catch (e) {
              console.error('JSON parse error:', e.message);
              errorMessage = [
                '## ❌ デプロイ失敗',
                '',
                `**コマンドID:** ${commandId}`,
                '**エラー:** 実行結果の解析に失敗しました',
                '',
                '**エラー詳細:**',
                '```',
                e.message,
                '```',
                '',
                `**タイムスタンプ:** ${new Date().toISOString()}`
              ].join('\n');
            }
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: errorMessage
            });
